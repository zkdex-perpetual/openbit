/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OperationsTestInterface extends ethers.utils.Interface {
  functions: {
    "testChangePubkeyPubdata(tuple,bytes)": FunctionFragment;
    "testDepositPriorityQueue(tuple,bytes)": FunctionFragment;
    "testDepositPubdata(tuple,bytes)": FunctionFragment;
    "testForcedExitPubdata(tuple,bytes)": FunctionFragment;
    "testFullExitPriorityQueue(tuple,bytes)": FunctionFragment;
    "testFullExitPubdata(tuple,bytes)": FunctionFragment;
    "testWithdrawPubdata(tuple,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "testChangePubkeyPubdata",
    values: [
      {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositPriorityQueue",
    values: [
      {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testDepositPubdata",
    values: [
      {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testForcedExitPubdata",
    values: [
      { tokenId: BigNumberish; amount: BigNumberish; target: string },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testFullExitPriorityQueue",
    values: [
      {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testFullExitPubdata",
    values: [
      {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testWithdrawPubdata",
    values: [
      {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "testChangePubkeyPubdata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositPriorityQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDepositPubdata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testForcedExitPubdata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFullExitPriorityQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFullExitPubdata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithdrawPubdata",
    data: BytesLike
  ): Result;

  events: {};
}

export class OperationsTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OperationsTestInterface;

  functions: {
    testChangePubkeyPubdata(
      _example: {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "testChangePubkeyPubdata((uint32,bytes20,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    testDepositPriorityQueue(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "testDepositPriorityQueue((uint32,uint32,uint128,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    testDepositPubdata(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "testDepositPubdata((uint32,uint32,uint128,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    testForcedExitPubdata(
      _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "testForcedExitPubdata((uint32,uint128,address),bytes)"(
      _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    testFullExitPriorityQueue(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "testFullExitPriorityQueue((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    testFullExitPubdata(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "testFullExitPubdata((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    testWithdrawPubdata(
      _example: {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "testWithdrawPubdata((uint32,uint128,address,uint32),bytes)"(
      _example: {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;
  };

  testChangePubkeyPubdata(
    _example: {
      accountId: BigNumberish;
      pubKeyHash: BytesLike;
      owner: string;
      nonce: BigNumberish;
    },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "testChangePubkeyPubdata((uint32,bytes20,address,uint32),bytes)"(
    _example: {
      accountId: BigNumberish;
      pubKeyHash: BytesLike;
      owner: string;
      nonce: BigNumberish;
    },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  testDepositPriorityQueue(
    _example: {
      accountId: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      owner: string;
      chainId: BigNumberish;
    },
    _priorityQueueData: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "testDepositPriorityQueue((uint32,uint32,uint128,address,uint32),bytes)"(
    _example: {
      accountId: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      owner: string;
      chainId: BigNumberish;
    },
    _priorityQueueData: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  testDepositPubdata(
    _example: {
      accountId: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      owner: string;
      chainId: BigNumberish;
    },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "testDepositPubdata((uint32,uint32,uint128,address,uint32),bytes)"(
    _example: {
      accountId: BigNumberish;
      tokenId: BigNumberish;
      amount: BigNumberish;
      owner: string;
      chainId: BigNumberish;
    },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  testForcedExitPubdata(
    _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "testForcedExitPubdata((uint32,uint128,address),bytes)"(
    _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  testFullExitPriorityQueue(
    _example: {
      accountId: BigNumberish;
      owner: string;
      tokenId: BigNumberish;
      amount: BigNumberish;
      nftCreatorAccountId: BigNumberish;
      nftCreatorAddress: string;
      nftSerialId: BigNumberish;
      nftContentHash: BytesLike;
    },
    _priorityQueueData: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "testFullExitPriorityQueue((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
    _example: {
      accountId: BigNumberish;
      owner: string;
      tokenId: BigNumberish;
      amount: BigNumberish;
      nftCreatorAccountId: BigNumberish;
      nftCreatorAddress: string;
      nftSerialId: BigNumberish;
      nftContentHash: BytesLike;
    },
    _priorityQueueData: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  testFullExitPubdata(
    _example: {
      accountId: BigNumberish;
      owner: string;
      tokenId: BigNumberish;
      amount: BigNumberish;
      nftCreatorAccountId: BigNumberish;
      nftCreatorAddress: string;
      nftSerialId: BigNumberish;
      nftContentHash: BytesLike;
    },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "testFullExitPubdata((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
    _example: {
      accountId: BigNumberish;
      owner: string;
      tokenId: BigNumberish;
      amount: BigNumberish;
      nftCreatorAccountId: BigNumberish;
      nftCreatorAddress: string;
      nftSerialId: BigNumberish;
      nftContentHash: BytesLike;
    },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  testWithdrawPubdata(
    _example: {
      tokenId: BigNumberish;
      amount: BigNumberish;
      owner: string;
      chainId: BigNumberish;
    },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "testWithdrawPubdata((uint32,uint128,address,uint32),bytes)"(
    _example: {
      tokenId: BigNumberish;
      amount: BigNumberish;
      owner: string;
      chainId: BigNumberish;
    },
    _pubdata: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    testChangePubkeyPubdata(
      _example: {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testChangePubkeyPubdata((uint32,bytes20,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    testDepositPriorityQueue(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testDepositPriorityQueue((uint32,uint32,uint128,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    testDepositPubdata(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testDepositPubdata((uint32,uint32,uint128,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    testForcedExitPubdata(
      _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testForcedExitPubdata((uint32,uint128,address),bytes)"(
      _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    testFullExitPriorityQueue(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testFullExitPriorityQueue((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    testFullExitPubdata(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testFullExitPubdata((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    testWithdrawPubdata(
      _example: {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testWithdrawPubdata((uint32,uint128,address,uint32),bytes)"(
      _example: {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    testChangePubkeyPubdata(
      _example: {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testChangePubkeyPubdata((uint32,bytes20,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testDepositPriorityQueue(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testDepositPriorityQueue((uint32,uint32,uint128,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testDepositPubdata(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testDepositPubdata((uint32,uint32,uint128,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testForcedExitPubdata(
      _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testForcedExitPubdata((uint32,uint128,address),bytes)"(
      _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testFullExitPriorityQueue(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testFullExitPriorityQueue((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testFullExitPubdata(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testFullExitPubdata((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testWithdrawPubdata(
      _example: {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testWithdrawPubdata((uint32,uint128,address,uint32),bytes)"(
      _example: {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    testChangePubkeyPubdata(
      _example: {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testChangePubkeyPubdata((uint32,bytes20,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        pubKeyHash: BytesLike;
        owner: string;
        nonce: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testDepositPriorityQueue(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testDepositPriorityQueue((uint32,uint32,uint128,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testDepositPubdata(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testDepositPubdata((uint32,uint32,uint128,address,uint32),bytes)"(
      _example: {
        accountId: BigNumberish;
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testForcedExitPubdata(
      _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testForcedExitPubdata((uint32,uint128,address),bytes)"(
      _example: { tokenId: BigNumberish; amount: BigNumberish; target: string },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testFullExitPriorityQueue(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testFullExitPriorityQueue((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _priorityQueueData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testFullExitPubdata(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testFullExitPubdata((uint32,address,uint32,uint128,uint32,address,uint32,bytes32),bytes)"(
      _example: {
        accountId: BigNumberish;
        owner: string;
        tokenId: BigNumberish;
        amount: BigNumberish;
        nftCreatorAccountId: BigNumberish;
        nftCreatorAddress: string;
        nftSerialId: BigNumberish;
        nftContentHash: BytesLike;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testWithdrawPubdata(
      _example: {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testWithdrawPubdata((uint32,uint128,address,uint32),bytes)"(
      _example: {
        tokenId: BigNumberish;
        amount: BigNumberish;
        owner: string;
        chainId: BigNumberish;
      },
      _pubdata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
