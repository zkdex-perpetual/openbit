/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VerifierInterface extends ethers.utils.Interface {
  functions: {
    "initialize(bytes)": FunctionFragment;
    "upgrade(bytes)": FunctionFragment;
    "verifyAggregatedBlockProof(uint256[],uint256[],uint8[],uint256[],uint256[16])": FunctionFragment;
    "verifyExitProof(bytes32,uint32,address,uint32,uint128,uint32,address,uint32,bytes32,uint256[])": FunctionFragment;
    "verify_serialized_proof(uint256[],uint256[],tuple)": FunctionFragment;
    "verify_serialized_proof_with_recursion(uint256[],uint256[],uint256,uint8,uint8[],uint256[],uint256[16],tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "verifyAggregatedBlockProof",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyExitProof",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify_serialized_proof",
    values: [
      BigNumberish[],
      BigNumberish[],
      {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify_serialized_proof_with_recursion",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAggregatedBlockProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyExitProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verify_serialized_proof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verify_serialized_proof_with_recursion",
    data: BytesLike
  ): Result;

  events: {};
}

export class Verifier extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VerifierInterface;

  functions: {
    initialize(
      arg0: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(bytes)"(
      arg0: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgrade(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgrade(bytes)"(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    verifyAggregatedBlockProof(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individualVksInputs: BigNumberish[],
      _subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verifyAggregatedBlockProof(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individualVksInputs: BigNumberish[],
      _subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    verifyExitProof(
      _rootHash: BytesLike,
      _accountId: BigNumberish,
      _owner: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verifyExitProof(bytes32,uint32,address,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
      _rootHash: BytesLike,
      _accountId: BigNumberish,
      _owner: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verify_serialized_proof(uint256[],uint256[],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    verify_serialized_proof_with_recursion(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verify_serialized_proof_with_recursion(uint256[],uint256[],uint256,uint8,uint8[],uint256[],uint256[16],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  initialize(
    arg0: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(bytes)"(
    arg0: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgrade(
    upgradeParameters: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgrade(bytes)"(
    upgradeParameters: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  verifyAggregatedBlockProof(
    _recursiveInput: BigNumberish[],
    _proof: BigNumberish[],
    _vkIndexes: BigNumberish[],
    _individualVksInputs: BigNumberish[],
    _subproofsLimbs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyAggregatedBlockProof(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
    _recursiveInput: BigNumberish[],
    _proof: BigNumberish[],
    _vkIndexes: BigNumberish[],
    _individualVksInputs: BigNumberish[],
    _subproofsLimbs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyExitProof(
    _rootHash: BytesLike,
    _accountId: BigNumberish,
    _owner: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _nftCreatorAccountId: BigNumberish,
    _nftCreatorAddress: string,
    _nftSerialId: BigNumberish,
    _nftContentHash: BytesLike,
    _proof: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyExitProof(bytes32,uint32,address,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
    _rootHash: BytesLike,
    _accountId: BigNumberish,
    _owner: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _nftCreatorAccountId: BigNumberish,
    _nftCreatorAddress: string,
    _nftSerialId: BigNumberish,
    _nftContentHash: BytesLike,
    _proof: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify_serialized_proof(
    public_inputs: BigNumberish[],
    serialized_proof: BigNumberish[],
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_selector_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_x: {
        X: [BigNumberish, BigNumberish];
        Y: [BigNumberish, BigNumberish];
      };
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verify_serialized_proof(uint256[],uint256[],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
    public_inputs: BigNumberish[],
    serialized_proof: BigNumberish[],
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_selector_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_x: {
        X: [BigNumberish, BigNumberish];
        Y: [BigNumberish, BigNumberish];
      };
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify_serialized_proof_with_recursion(
    public_inputs: BigNumberish[],
    serialized_proof: BigNumberish[],
    recursive_vks_root: BigNumberish,
    max_valid_index: BigNumberish,
    recursive_vks_indexes: BigNumberish[],
    individual_vks_inputs: BigNumberish[],
    subproofs_limbs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_selector_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_x: {
        X: [BigNumberish, BigNumberish];
        Y: [BigNumberish, BigNumberish];
      };
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verify_serialized_proof_with_recursion(uint256[],uint256[],uint256,uint8,uint8[],uint256[],uint256[16],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
    public_inputs: BigNumberish[],
    serialized_proof: BigNumberish[],
    recursive_vks_root: BigNumberish,
    max_valid_index: BigNumberish,
    recursive_vks_indexes: BigNumberish[],
    individual_vks_inputs: BigNumberish[],
    subproofs_limbs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_selector_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_x: {
        X: [BigNumberish, BigNumberish];
        Y: [BigNumberish, BigNumberish];
      };
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    initialize(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    "initialize(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(
      upgradeParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgrade(bytes)"(
      upgradeParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAggregatedBlockProof(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individualVksInputs: BigNumberish[],
      _subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyAggregatedBlockProof(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individualVksInputs: BigNumberish[],
      _subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyExitProof(
      _rootHash: BytesLike,
      _accountId: BigNumberish,
      _owner: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyExitProof(bytes32,uint32,address,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
      _rootHash: BytesLike,
      _accountId: BigNumberish,
      _owner: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verify_serialized_proof(uint256[],uint256[],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify_serialized_proof_with_recursion(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verify_serialized_proof_with_recursion(uint256[],uint256[],uint256,uint8,uint8[],uint256[],uint256[16],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    initialize(arg0: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "initialize(bytes)"(
      arg0: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgrade(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgrade(bytes)"(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    verifyAggregatedBlockProof(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individualVksInputs: BigNumberish[],
      _subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyAggregatedBlockProof(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individualVksInputs: BigNumberish[],
      _subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyExitProof(
      _rootHash: BytesLike,
      _accountId: BigNumberish,
      _owner: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyExitProof(bytes32,uint32,address,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
      _rootHash: BytesLike,
      _accountId: BigNumberish,
      _owner: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify_serialized_proof(uint256[],uint256[],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify_serialized_proof_with_recursion(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify_serialized_proof_with_recursion(uint256[],uint256[],uint256,uint8,uint8[],uint256[],uint256[16],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      arg0: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(bytes)"(
      arg0: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgrade(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgrade(bytes)"(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    verifyAggregatedBlockProof(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individualVksInputs: BigNumberish[],
      _subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyAggregatedBlockProof(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individualVksInputs: BigNumberish[],
      _subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyExitProof(
      _rootHash: BytesLike,
      _accountId: BigNumberish,
      _owner: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyExitProof(bytes32,uint32,address,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
      _rootHash: BytesLike,
      _accountId: BigNumberish,
      _owner: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify_serialized_proof(uint256[],uint256[],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify_serialized_proof_with_recursion(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify_serialized_proof_with_recursion(uint256[],uint256[],uint256,uint8,uint8[],uint256[],uint256[16],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
