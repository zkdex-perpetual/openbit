/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AdditionalZkSyncInterface extends ethers.utils.Interface {
  functions: {
    "authFacts(address,uint32)": FunctionFragment;
    "cancelOutstandingDepositsForExodusMode(uint64,bytes[])": FunctionFragment;
    "cutUpgradeNoticePeriod(bytes32)": FunctionFragment;
    "cutUpgradeNoticePeriodBySignature(bytes[])": FunctionFragment;
    "exodusMode()": FunctionFragment;
    "firstPriorityRequestId()": FunctionFragment;
    "pendingWithdrawTotal(uint16)": FunctionFragment;
    "performExodus(tuple,address,uint32,uint32,uint128,uint32,address,uint32,bytes32,uint256[])": FunctionFragment;
    "revertBlocks(tuple[])": FunctionFragment;
    "setAuthPubkeyHash(bytes,uint32)": FunctionFragment;
    "storedBlockHashes(uint32)": FunctionFragment;
    "totalBlocksCommitted()": FunctionFragment;
    "totalBlocksExecuted()": FunctionFragment;
    "totalBlocksProven()": FunctionFragment;
    "totalOpenPriorityRequests()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authFacts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOutstandingDepositsForExodusMode",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cutUpgradeNoticePeriod",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cutUpgradeNoticePeriodBySignature",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exodusMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstPriorityRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawTotal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performExodus",
    values: [
      {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthPubkeyHash",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksProven",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOpenPriorityRequests",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "authFacts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOutstandingDepositsForExodusMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cutUpgradeNoticePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cutUpgradeNoticePeriodBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exodusMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPriorityRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performExodus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthPubkeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksProven",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOpenPriorityRequests",
    data: BytesLike
  ): Result;

  events: {
    "ApproveCutUpgradeNoticePeriod(address)": EventFragment;
    "BlockCommit(uint32)": EventFragment;
    "BlockVerification(uint32)": EventFragment;
    "BlocksRevert(uint32,uint32)": EventFragment;
    "Deposit(uint16,address,uint128,uint32,uint256,uint64)": EventFragment;
    "DepositCommit(uint32,uint32,address,uint16,uint128)": EventFragment;
    "ExodusMode()": EventFragment;
    "FactAuth(address,uint32,bytes)": EventFragment;
    "FullExitCommit(uint32,uint32,address,uint16,uint128)": EventFragment;
    "NewPriorityRequest(address,uint64,uint8,bytes,uint256)": EventFragment;
    "NoticePeriodChange(uint256)": EventFragment;
    "Withdrawal(uint16,uint128)": EventFragment;
    "WithdrawalNFT(uint32)": EventFragment;
    "WithdrawalNFTPending(uint32)": EventFragment;
    "WithdrawalPending(uint16,address,uint128)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ApproveCutUpgradeNoticePeriod"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockVerification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksRevert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExodusMode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactAuth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FullExitCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NoticePeriodChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalNFTPending"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalPending"): EventFragment;
}

export class AdditionalZkSync extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AdditionalZkSyncInterface;

  functions: {
    authFacts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "authFacts(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    cancelOutstandingDepositsForExodusMode(
      _n: BigNumberish,
      _depositsPubdata: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOutstandingDepositsForExodusMode(uint64,bytes[])"(
      _n: BigNumberish,
      _depositsPubdata: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cutUpgradeNoticePeriod(
      targetsHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cutUpgradeNoticePeriod(bytes32)"(
      targetsHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cutUpgradeNoticePeriodBySignature(
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cutUpgradeNoticePeriodBySignature(bytes[])"(
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exodusMode(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "exodusMode()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    firstPriorityRequestId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "firstPriorityRequestId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    pendingWithdrawTotal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingWithdrawTotal(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    performExodus(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _owner: string,
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "performExodus((uint32,uint64,bytes32,uint256,bytes32,bytes32),address,uint32,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _owner: string,
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revertBlocks(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revertBlocks(tuple[])"(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuthPubkeyHash(
      _pubkeyHash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuthPubkeyHash(bytes,uint32)"(
      _pubkeyHash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    storedBlockHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "storedBlockHashes(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalBlocksCommitted(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "totalBlocksCommitted()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    totalBlocksExecuted(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "totalBlocksExecuted()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    totalBlocksProven(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "totalBlocksProven()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    totalOpenPriorityRequests(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalOpenPriorityRequests()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  authFacts(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "authFacts(address,uint32)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  cancelOutstandingDepositsForExodusMode(
    _n: BigNumberish,
    _depositsPubdata: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOutstandingDepositsForExodusMode(uint64,bytes[])"(
    _n: BigNumberish,
    _depositsPubdata: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cutUpgradeNoticePeriod(
    targetsHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cutUpgradeNoticePeriod(bytes32)"(
    targetsHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cutUpgradeNoticePeriodBySignature(
    signatures: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cutUpgradeNoticePeriodBySignature(bytes[])"(
    signatures: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exodusMode(overrides?: CallOverrides): Promise<boolean>;

  "exodusMode()"(overrides?: CallOverrides): Promise<boolean>;

  firstPriorityRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPriorityRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

  pendingWithdrawTotal(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingWithdrawTotal(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  performExodus(
    _storedBlockInfo: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    },
    _owner: string,
    _accountId: BigNumberish,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _nftCreatorAccountId: BigNumberish,
    _nftCreatorAddress: string,
    _nftSerialId: BigNumberish,
    _nftContentHash: BytesLike,
    _proof: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "performExodus((uint32,uint64,bytes32,uint256,bytes32,bytes32),address,uint32,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
    _storedBlockInfo: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    },
    _owner: string,
    _accountId: BigNumberish,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _nftCreatorAccountId: BigNumberish,
    _nftCreatorAddress: string,
    _nftSerialId: BigNumberish,
    _nftContentHash: BytesLike,
    _proof: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revertBlocks(
    _blocksToRevert: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revertBlocks(tuple[])"(
    _blocksToRevert: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuthPubkeyHash(
    _pubkeyHash: BytesLike,
    _nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuthPubkeyHash(bytes,uint32)"(
    _pubkeyHash: BytesLike,
    _nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  storedBlockHashes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "storedBlockHashes(uint32)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalBlocksCommitted(overrides?: CallOverrides): Promise<number>;

  "totalBlocksCommitted()"(overrides?: CallOverrides): Promise<number>;

  totalBlocksExecuted(overrides?: CallOverrides): Promise<number>;

  "totalBlocksExecuted()"(overrides?: CallOverrides): Promise<number>;

  totalBlocksProven(overrides?: CallOverrides): Promise<number>;

  "totalBlocksProven()"(overrides?: CallOverrides): Promise<number>;

  totalOpenPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

  "totalOpenPriorityRequests()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    authFacts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "authFacts(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    cancelOutstandingDepositsForExodusMode(
      _n: BigNumberish,
      _depositsPubdata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOutstandingDepositsForExodusMode(uint64,bytes[])"(
      _n: BigNumberish,
      _depositsPubdata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    cutUpgradeNoticePeriod(
      targetsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cutUpgradeNoticePeriod(bytes32)"(
      targetsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cutUpgradeNoticePeriodBySignature(
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cutUpgradeNoticePeriodBySignature(bytes[])"(
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    exodusMode(overrides?: CallOverrides): Promise<boolean>;

    "exodusMode()"(overrides?: CallOverrides): Promise<boolean>;

    firstPriorityRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPriorityRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawTotal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingWithdrawTotal(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performExodus(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _owner: string,
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "performExodus((uint32,uint64,bytes32,uint256,bytes32,bytes32),address,uint32,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _owner: string,
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    revertBlocks(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "revertBlocks(tuple[])"(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthPubkeyHash(
      _pubkeyHash: BytesLike,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthPubkeyHash(bytes,uint32)"(
      _pubkeyHash: BytesLike,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    storedBlockHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "storedBlockHashes(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalBlocksCommitted(overrides?: CallOverrides): Promise<number>;

    "totalBlocksCommitted()"(overrides?: CallOverrides): Promise<number>;

    totalBlocksExecuted(overrides?: CallOverrides): Promise<number>;

    "totalBlocksExecuted()"(overrides?: CallOverrides): Promise<number>;

    totalBlocksProven(overrides?: CallOverrides): Promise<number>;

    "totalBlocksProven()"(overrides?: CallOverrides): Promise<number>;

    totalOpenPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

    "totalOpenPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ApproveCutUpgradeNoticePeriod(addr: string | null): EventFilter;

    BlockCommit(blockNumber: BigNumberish | null): EventFilter;

    BlockVerification(blockNumber: BigNumberish | null): EventFilter;

    BlocksRevert(
      totalBlocksVerified: null,
      totalBlocksCommitted: null
    ): EventFilter;

    Deposit(
      tokenId: BigNumberish | null,
      user: null,
      amount: null,
      chainId: null,
      pendingTotal: null,
      serialId: null
    ): EventFilter;

    DepositCommit(
      zkSyncBlockId: BigNumberish | null,
      accountId: BigNumberish | null,
      owner: null,
      tokenId: BigNumberish | null,
      amount: null
    ): EventFilter;

    ExodusMode(): EventFilter;

    FactAuth(sender: string | null, nonce: null, fact: null): EventFilter;

    FullExitCommit(
      zkSyncBlockId: BigNumberish | null,
      accountId: BigNumberish | null,
      owner: null,
      tokenId: BigNumberish | null,
      amount: null
    ): EventFilter;

    NewPriorityRequest(
      sender: null,
      serialId: null,
      opType: null,
      pubData: null,
      expirationBlock: null
    ): EventFilter;

    NoticePeriodChange(newNoticePeriod: null): EventFilter;

    Withdrawal(tokenId: BigNumberish | null, amount: null): EventFilter;

    WithdrawalNFT(tokenId: BigNumberish | null): EventFilter;

    WithdrawalNFTPending(tokenId: BigNumberish | null): EventFilter;

    WithdrawalPending(
      tokenId: BigNumberish | null,
      recepient: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    authFacts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "authFacts(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOutstandingDepositsForExodusMode(
      _n: BigNumberish,
      _depositsPubdata: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOutstandingDepositsForExodusMode(uint64,bytes[])"(
      _n: BigNumberish,
      _depositsPubdata: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    cutUpgradeNoticePeriod(
      targetsHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cutUpgradeNoticePeriod(bytes32)"(
      targetsHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cutUpgradeNoticePeriodBySignature(
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cutUpgradeNoticePeriodBySignature(bytes[])"(
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    exodusMode(overrides?: CallOverrides): Promise<BigNumber>;

    "exodusMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPriorityRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPriorityRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawTotal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingWithdrawTotal(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performExodus(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _owner: string,
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "performExodus((uint32,uint64,bytes32,uint256,bytes32,bytes32),address,uint32,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _owner: string,
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    revertBlocks(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revertBlocks(tuple[])"(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuthPubkeyHash(
      _pubkeyHash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuthPubkeyHash(bytes,uint32)"(
      _pubkeyHash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    storedBlockHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "storedBlockHashes(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBlocksProven(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBlocksProven()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalOpenPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

    "totalOpenPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authFacts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authFacts(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOutstandingDepositsForExodusMode(
      _n: BigNumberish,
      _depositsPubdata: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOutstandingDepositsForExodusMode(uint64,bytes[])"(
      _n: BigNumberish,
      _depositsPubdata: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cutUpgradeNoticePeriod(
      targetsHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cutUpgradeNoticePeriod(bytes32)"(
      targetsHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cutUpgradeNoticePeriodBySignature(
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cutUpgradeNoticePeriodBySignature(bytes[])"(
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exodusMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exodusMode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPriorityRequestId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "firstPriorityRequestId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingWithdrawTotal(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingWithdrawTotal(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performExodus(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _owner: string,
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "performExodus((uint32,uint64,bytes32,uint256,bytes32,bytes32),address,uint32,uint32,uint128,uint32,address,uint32,bytes32,uint256[])"(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _owner: string,
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _nftCreatorAccountId: BigNumberish,
      _nftCreatorAddress: string,
      _nftSerialId: BigNumberish,
      _nftContentHash: BytesLike,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revertBlocks(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revertBlocks(tuple[])"(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuthPubkeyHash(
      _pubkeyHash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuthPubkeyHash(bytes,uint32)"(
      _pubkeyHash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    storedBlockHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "storedBlockHashes(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBlocksCommitted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBlocksExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBlocksExecuted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBlocksProven(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBlocksProven()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalOpenPriorityRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalOpenPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
