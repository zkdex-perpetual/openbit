/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "addToken(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "listingCap()": FunctionFragment;
    "listingFee()": FunctionFragment;
    "listingFeeToken()": FunctionFragment;
    "setLister(address,bool)": FunctionFragment;
    "setListingCap(uint16)": FunctionFragment;
    "setListingFee(uint256)": FunctionFragment;
    "setListingFeeToken(address,uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "tokenLister(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingFeeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLister",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingFeeToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(functionFragment: "tokenLister", values: [string]): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listingCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLister", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setListingCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenLister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "ListingCapUpdate(uint16)": EventFragment;
    "ListingFeeTokenUpdate(address,uint256)": EventFragment;
    "ListingFeeUpdate(uint256)": EventFragment;
    "TokenListerUpdate(address,bool)": EventFragment;
    "TreasuryUpdate(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ListingCapUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingFeeTokenUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingFeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenListerUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryUpdate"): EventFragment;
}

export class TokenGovernance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenGovernanceInterface;

  functions: {
    addToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governance()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    listingCap(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "listingCap()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    listingFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "listingFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    listingFeeToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "listingFeeToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    setLister(
      _listerAddress: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLister(address,bool)"(
      _listerAddress: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setListingCap(
      _newListingCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setListingCap(uint16)"(
      _newListingCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setListingFee(
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setListingFee(uint256)"(
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setListingFeeToken(
      _newListingFeeToken: string,
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setListingFeeToken(address,uint256)"(
      _newListingFeeToken: string,
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenLister(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "tokenLister(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    treasury(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "treasury()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  addToken(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  listingCap(overrides?: CallOverrides): Promise<number>;

  "listingCap()"(overrides?: CallOverrides): Promise<number>;

  listingFee(overrides?: CallOverrides): Promise<BigNumber>;

  "listingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  listingFeeToken(overrides?: CallOverrides): Promise<string>;

  "listingFeeToken()"(overrides?: CallOverrides): Promise<string>;

  setLister(
    _listerAddress: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLister(address,bool)"(
    _listerAddress: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setListingCap(
    _newListingCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setListingCap(uint16)"(
    _newListingCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setListingFee(
    _newListingFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setListingFee(uint256)"(
    _newListingFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setListingFeeToken(
    _newListingFeeToken: string,
    _newListingFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setListingFeeToken(address,uint256)"(
    _newListingFeeToken: string,
    _newListingFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasury(
    _newTreasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasury(address)"(
    _newTreasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenLister(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "tokenLister(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "addToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    listingCap(overrides?: CallOverrides): Promise<number>;

    "listingCap()"(overrides?: CallOverrides): Promise<number>;

    listingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "listingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    listingFeeToken(overrides?: CallOverrides): Promise<string>;

    "listingFeeToken()"(overrides?: CallOverrides): Promise<string>;

    setLister(
      _listerAddress: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLister(address,bool)"(
      _listerAddress: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setListingCap(
      _newListingCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setListingCap(uint16)"(
      _newListingCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setListingFee(
      _newListingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setListingFee(uint256)"(
      _newListingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setListingFeeToken(
      _newListingFeeToken: string,
      _newListingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setListingFeeToken(address,uint256)"(
      _newListingFeeToken: string,
      _newListingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_newTreasury: string, overrides?: CallOverrides): Promise<void>;

    "setTreasury(address)"(
      _newTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenLister(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "tokenLister(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ListingCapUpdate(newListingCap: null): EventFilter;

    ListingFeeTokenUpdate(
      newListingFeeToken: string | null,
      newListingFee: null
    ): EventFilter;

    ListingFeeUpdate(newListingFee: null): EventFilter;

    TokenListerUpdate(tokenLister: string | null, isActive: null): EventFilter;

    TreasuryUpdate(newTreasury: null): EventFilter;
  };

  estimateGas: {
    addToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    listingCap(overrides?: CallOverrides): Promise<BigNumber>;

    "listingCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    listingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "listingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    listingFeeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "listingFeeToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setLister(
      _listerAddress: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLister(address,bool)"(
      _listerAddress: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setListingCap(
      _newListingCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setListingCap(uint16)"(
      _newListingCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setListingFee(
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setListingFee(uint256)"(
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setListingFeeToken(
      _newListingFeeToken: string,
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setListingFeeToken(address,uint256)"(
      _newListingFeeToken: string,
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenLister(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenLister(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "listingCap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "listingFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingFeeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "listingFeeToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLister(
      _listerAddress: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLister(address,bool)"(
      _listerAddress: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setListingCap(
      _newListingCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setListingCap(uint16)"(
      _newListingCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setListingFee(
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setListingFee(uint256)"(
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setListingFeeToken(
      _newListingFeeToken: string,
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setListingFeeToken(address,uint256)"(
      _newListingFeeToken: string,
      _newListingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenLister(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenLister(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
