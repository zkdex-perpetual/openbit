/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RegenesisMultisigInterface extends ethers.utils.Interface {
  functions: {
    "approveHash(bytes32,bytes32)": FunctionFragment;
    "candidateNewRootHash()": FunctionFragment;
    "candidateOldRootHash()": FunctionFragment;
    "getMaster()": FunctionFragment;
    "newRootHash()": FunctionFragment;
    "oldRootHash()": FunctionFragment;
    "submitHash(bytes32,bytes32)": FunctionFragment;
    "transferMastership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveHash",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateNewRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateOldRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMaster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitHash",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMastership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateNewRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateOldRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMastership",
    data: BytesLike
  ): Result;

  events: {
    "CandidateAccepted(bytes32,bytes32)": EventFragment;
    "CandidateApproval(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CandidateAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CandidateApproval"): EventFragment;
}

export class RegenesisMultisig extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RegenesisMultisigInterface;

  functions: {
    approveHash(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveHash(bytes32,bytes32)"(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidateNewRootHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "candidateNewRootHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    candidateOldRootHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "candidateOldRootHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getMaster(overrides?: CallOverrides): Promise<{
      master: string;
      0: string;
    }>;

    "getMaster()"(overrides?: CallOverrides): Promise<{
      master: string;
      0: string;
    }>;

    newRootHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "newRootHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    oldRootHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "oldRootHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    submitHash(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitHash(bytes32,bytes32)"(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferMastership(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferMastership(address)"(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approveHash(
    _oldRootHash: BytesLike,
    _newRootHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveHash(bytes32,bytes32)"(
    _oldRootHash: BytesLike,
    _newRootHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidateNewRootHash(overrides?: CallOverrides): Promise<string>;

  "candidateNewRootHash()"(overrides?: CallOverrides): Promise<string>;

  candidateOldRootHash(overrides?: CallOverrides): Promise<string>;

  "candidateOldRootHash()"(overrides?: CallOverrides): Promise<string>;

  getMaster(overrides?: CallOverrides): Promise<string>;

  "getMaster()"(overrides?: CallOverrides): Promise<string>;

  newRootHash(overrides?: CallOverrides): Promise<string>;

  "newRootHash()"(overrides?: CallOverrides): Promise<string>;

  oldRootHash(overrides?: CallOverrides): Promise<string>;

  "oldRootHash()"(overrides?: CallOverrides): Promise<string>;

  submitHash(
    _oldRootHash: BytesLike,
    _newRootHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitHash(bytes32,bytes32)"(
    _oldRootHash: BytesLike,
    _newRootHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferMastership(
    _newMaster: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferMastership(address)"(
    _newMaster: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approveHash(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveHash(bytes32,bytes32)"(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    candidateNewRootHash(overrides?: CallOverrides): Promise<string>;

    "candidateNewRootHash()"(overrides?: CallOverrides): Promise<string>;

    candidateOldRootHash(overrides?: CallOverrides): Promise<string>;

    "candidateOldRootHash()"(overrides?: CallOverrides): Promise<string>;

    getMaster(overrides?: CallOverrides): Promise<string>;

    "getMaster()"(overrides?: CallOverrides): Promise<string>;

    newRootHash(overrides?: CallOverrides): Promise<string>;

    "newRootHash()"(overrides?: CallOverrides): Promise<string>;

    oldRootHash(overrides?: CallOverrides): Promise<string>;

    "oldRootHash()"(overrides?: CallOverrides): Promise<string>;

    submitHash(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitHash(bytes32,bytes32)"(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferMastership(
      _newMaster: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferMastership(address)"(
      _newMaster: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CandidateAccepted(oldRootHash: null, newRootHash: null): EventFilter;

    CandidateApproval(currentApproval: null): EventFilter;
  };

  estimateGas: {
    approveHash(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveHash(bytes32,bytes32)"(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    candidateNewRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    "candidateNewRootHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    candidateOldRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    "candidateOldRootHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaster(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaster()"(overrides?: CallOverrides): Promise<BigNumber>;

    newRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    "newRootHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    oldRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    "oldRootHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitHash(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitHash(bytes32,bytes32)"(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferMastership(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferMastership(address)"(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveHash(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveHash(bytes32,bytes32)"(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidateNewRootHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "candidateNewRootHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidateOldRootHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "candidateOldRootHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMaster()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newRootHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newRootHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldRootHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oldRootHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitHash(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitHash(bytes32,bytes32)"(
      _oldRootHash: BytesLike,
      _newRootHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferMastership(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferMastership(address)"(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
