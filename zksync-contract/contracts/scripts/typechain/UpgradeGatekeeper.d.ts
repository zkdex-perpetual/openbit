/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UpgradeGatekeeperInterface extends ethers.utils.Interface {
  functions: {
    "addUpgradeable(address)": FunctionFragment;
    "cancelUpgrade()": FunctionFragment;
    "finishUpgrade(bytes[])": FunctionFragment;
    "getMaster()": FunctionFragment;
    "mainContract()": FunctionFragment;
    "managedContracts(uint256)": FunctionFragment;
    "nextTargets(uint256)": FunctionFragment;
    "noticePeriodFinishTimestamp()": FunctionFragment;
    "startPreparation()": FunctionFragment;
    "startUpgrade(address[])": FunctionFragment;
    "transferMastership(address)": FunctionFragment;
    "upgradeStatus()": FunctionFragment;
    "versionId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addUpgradeable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "getMaster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mainContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managedContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTargets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "noticePeriodFinishTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPreparation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startUpgrade",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMastership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "versionId", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addUpgradeable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noticePeriodFinishTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPreparation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMastership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versionId", data: BytesLike): Result;

  events: {
    "NewUpgradable(uint256,address)": EventFragment;
    "NoticePeriodStart(uint256,address[],uint256)": EventFragment;
    "PreparationStart(uint256)": EventFragment;
    "UpgradeCancel(uint256)": EventFragment;
    "UpgradeComplete(uint256,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewUpgradable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NoticePeriodStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreparationStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeComplete"): EventFragment;
}

export class UpgradeGatekeeper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UpgradeGatekeeperInterface;

  functions: {
    addUpgradeable(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addUpgradeable(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelUpgrade(overrides?: Overrides): Promise<ContractTransaction>;

    "cancelUpgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

    finishUpgrade(
      targetsUpgradeParameters: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finishUpgrade(bytes[])"(
      targetsUpgradeParameters: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMaster(overrides?: CallOverrides): Promise<{
      master: string;
      0: string;
    }>;

    "getMaster()"(overrides?: CallOverrides): Promise<{
      master: string;
      0: string;
    }>;

    mainContract(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "mainContract()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    managedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "managedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nextTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "nextTargets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    noticePeriodFinishTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "noticePeriodFinishTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    startPreparation(overrides?: Overrides): Promise<ContractTransaction>;

    "startPreparation()"(overrides?: Overrides): Promise<ContractTransaction>;

    startUpgrade(
      newTargets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "startUpgrade(address[])"(
      newTargets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferMastership(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferMastership(address)"(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeStatus(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "upgradeStatus()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    versionId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "versionId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  addUpgradeable(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addUpgradeable(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelUpgrade(overrides?: Overrides): Promise<ContractTransaction>;

  "cancelUpgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

  finishUpgrade(
    targetsUpgradeParameters: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finishUpgrade(bytes[])"(
    targetsUpgradeParameters: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMaster(overrides?: CallOverrides): Promise<string>;

  "getMaster()"(overrides?: CallOverrides): Promise<string>;

  mainContract(overrides?: CallOverrides): Promise<string>;

  "mainContract()"(overrides?: CallOverrides): Promise<string>;

  managedContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "managedContracts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nextTargets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "nextTargets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  noticePeriodFinishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "noticePeriodFinishTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startPreparation(overrides?: Overrides): Promise<ContractTransaction>;

  "startPreparation()"(overrides?: Overrides): Promise<ContractTransaction>;

  startUpgrade(
    newTargets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "startUpgrade(address[])"(
    newTargets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferMastership(
    _newMaster: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferMastership(address)"(
    _newMaster: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeStatus(overrides?: CallOverrides): Promise<number>;

  "upgradeStatus()"(overrides?: CallOverrides): Promise<number>;

  versionId(overrides?: CallOverrides): Promise<BigNumber>;

  "versionId()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addUpgradeable(addr: string, overrides?: CallOverrides): Promise<void>;

    "addUpgradeable(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelUpgrade(overrides?: CallOverrides): Promise<void>;

    "cancelUpgrade()"(overrides?: CallOverrides): Promise<void>;

    finishUpgrade(
      targetsUpgradeParameters: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "finishUpgrade(bytes[])"(
      targetsUpgradeParameters: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getMaster(overrides?: CallOverrides): Promise<string>;

    "getMaster()"(overrides?: CallOverrides): Promise<string>;

    mainContract(overrides?: CallOverrides): Promise<string>;

    "mainContract()"(overrides?: CallOverrides): Promise<string>;

    managedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "managedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nextTargets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "nextTargets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    noticePeriodFinishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "noticePeriodFinishTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startPreparation(overrides?: CallOverrides): Promise<boolean>;

    "startPreparation()"(overrides?: CallOverrides): Promise<boolean>;

    startUpgrade(
      newTargets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "startUpgrade(address[])"(
      newTargets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferMastership(
      _newMaster: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferMastership(address)"(
      _newMaster: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeStatus(overrides?: CallOverrides): Promise<number>;

    "upgradeStatus()"(overrides?: CallOverrides): Promise<number>;

    versionId(overrides?: CallOverrides): Promise<BigNumber>;

    "versionId()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    NewUpgradable(
      versionId: BigNumberish | null,
      upgradeable: string | null
    ): EventFilter;

    NoticePeriodStart(
      versionId: BigNumberish | null,
      newTargets: null,
      noticePeriod: null
    ): EventFilter;

    PreparationStart(versionId: BigNumberish | null): EventFilter;

    UpgradeCancel(versionId: BigNumberish | null): EventFilter;

    UpgradeComplete(
      versionId: BigNumberish | null,
      newTargets: null
    ): EventFilter;
  };

  estimateGas: {
    addUpgradeable(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "addUpgradeable(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelUpgrade(overrides?: Overrides): Promise<BigNumber>;

    "cancelUpgrade()"(overrides?: Overrides): Promise<BigNumber>;

    finishUpgrade(
      targetsUpgradeParameters: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finishUpgrade(bytes[])"(
      targetsUpgradeParameters: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMaster(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaster()"(overrides?: CallOverrides): Promise<BigNumber>;

    mainContract(overrides?: CallOverrides): Promise<BigNumber>;

    "mainContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    managedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "managedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextTargets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    noticePeriodFinishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "noticePeriodFinishTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startPreparation(overrides?: Overrides): Promise<BigNumber>;

    "startPreparation()"(overrides?: Overrides): Promise<BigNumber>;

    startUpgrade(
      newTargets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "startUpgrade(address[])"(
      newTargets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferMastership(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferMastership(address)"(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionId(overrides?: CallOverrides): Promise<BigNumber>;

    "versionId()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addUpgradeable(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addUpgradeable(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelUpgrade(overrides?: Overrides): Promise<PopulatedTransaction>;

    "cancelUpgrade()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    finishUpgrade(
      targetsUpgradeParameters: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finishUpgrade(bytes[])"(
      targetsUpgradeParameters: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMaster()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mainContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mainContract()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextTargets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noticePeriodFinishTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "noticePeriodFinishTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startPreparation(overrides?: Overrides): Promise<PopulatedTransaction>;

    "startPreparation()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    startUpgrade(
      newTargets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "startUpgrade(address[])"(
      newTargets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferMastership(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferMastership(address)"(
      _newMaster: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "upgradeStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
